

directive lean
import Soda.se.umu.cs.soda.prototype.example.market.core.MyList


class Money = Int


class Item

  abstract
    owner : Nat
    price : Money
    advertised : Boolean

end


class Market

  abstract
    accounts : List [Money]
    items : List [Item]

end


class MarketMod

  abstract
    bit : Boolean

  _mm : MyList = MyList_ (true)

  directive lean
  notation "_mm.get" => MyList.get
  notation "_mm.set" => MyList.set
  notation "_mm.foldl" => MyList.foldl

  as_market (market : Market) : Market =
    Market.mk (market .accounts) (market .items)

  get_items (market : Market) : List [Item] =
    match market
      case Market_ (_accounts) (items) ==> items

  directive lean
  theorem
    proj_items (market : Market) (accounts : List (Money)) (items : List (Item))
      : (market = Market_ (accounts) (items) ) -> get_items (market) = items := by
    rewrite [get_items]
    cases market
    intro h1
    rewrite [h1]
    simp

  _advertise (items : List [Item] ) (item_id : Nat) : List [Item] =
    match (_mm .get [Item] (items) (item_id) )
      case Some (item) ==>
        _mm .set [Item] (items) (item_id) (Item_ (item .owner) (item .price) (true) )
      case None ==> items

  advertise (market : Market) (item_id : Nat) : Market =
    Market.mk (market .accounts) (_advertise (market .items) (item_id) )

  _remove_ad (items : List [Item] ) (item_id : Nat) : List [Item] =
    match (_mm .get [Item] (items) (item_id) )
      case Some (item) ==>
        _mm .set [Item] (items) (item_id) (Item_ (item .owner) (item .price) (false) )
      case None ==> items

  remove_ad (market : Market) (item_id : Nat) : Market =
    Market.mk (market .accounts) (_remove_ad (market .items) (item_id) )

  _transfer_with_balances (accounts : List [Money] ) (origin : Nat) (target : Nat)
      (amount : Money) (origin_balance : Money) (target_balance : Money) : List [Money] =
    _mm .set [Money] (_mm .set [Money] (accounts)
      (origin) (origin_balance - amount) ) (target) (target_balance + amount)

  _transfer_with (accounts : List [Money] ) (origin : Nat) (target : Nat) (amount : Money)
      (origin_balance : Money) : List [Money] =
    match (_mm .get [Money] (accounts) (target) )
      case Some (target_balance) ==>
        _transfer_with_balances (accounts) (origin) (target)
          (amount) (origin_balance) (target_balance)
      case None ==> accounts

  _transfer (accounts : List [Money] ) (origin : Nat) (target : Nat) (amount : Money)
      : List [Money] =
    match (_mm .get [Money] (accounts) (origin) )
      case Some (origin_balance) ==>
        _transfer_with (accounts) (origin) (target) (amount) (origin_balance)
      case None ==> accounts

  sell (market : Market) (item_id : Nat) (buyer : Nat) : Market =
    match (_mm .get [Item] (market .items) (item_id) )
      case Some (item) ==>
        Market .mk (
          _transfer (market .accounts) (buyer) (item .owner) (item .price) ) (
          _mm .set [Item] (market .items) (item_id) (Item_ (buyer) (item .price) (false) )
        )
      case None ==> market

  _sum_pair (a : Money) (b : Money) : Money =
    a + b

  assets (market : Market) : Money =
    _mm .foldl [Money] [Money] (market .accounts) (0) (_sum_pair)

end

