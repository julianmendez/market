
/**
 * This is the main entry point.
 */

class Main

  help = "Usage: it has one parameter, a YAML file containing the operations."

  read_file (file_name : String) : String =
    @new String (Files .readAllBytes (Paths .get (file_name) ) )

  empty_market = Market .mk (List [Money] () ) (List [Item] () )

  yaml_parser = YamlParser .mk

  operation_parser = OperationParser .mk

  operation_processor = OperationProcessor .mk

  process_file (file_name : String) : Option [Market] =
    operation_processor
      .process (Some (empty_market) ) (
         operation_parser .parse (
           yaml_parser .parse ( @new StringReader (read_file (file_name) ) )
         )
      )

  _serialize_market (m : Market) : String =
    "Account balances:\n" +
      (m .accounts .map (lambda account --> account .toString) .mkString (", ") ) + "\n\n" +
    "Items:\n" +
      (m .items .map (lambda item -->
        "(" + item .owner .toString + ", " + item .price .toString + ")" ) .mkString (" , ") ) +
    "\n\n"

  serialize_market (maybe_market : Option [Market] ) : String =
    match maybe_market
      case Some (market) ==> _serialize_market (market)
      case None ==> "Undefined market"

  execute (arguments : List [String] ) : Unit =
    if arguments .length > 0
    then println (serialize_market (process_file (arguments .apply (0) ) ) )
    else println (help)

  main (arguments : Array [String] ) : Unit =
    execute (arguments .toList)

end

