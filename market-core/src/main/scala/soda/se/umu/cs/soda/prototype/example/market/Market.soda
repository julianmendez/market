
directive lean
/- Prelude for Soda types. -/
notation:max "Boolean" => Bool
notation:max "None" => none
notation:max "Some" => some
notation:max "Nil" => []

directive scala
type Nat = Int

class Index = Nat

class Money = Int


class Item

  abstract
    owner : Index
    price : Money
    advertised : Boolean

end


class Market

  abstract
    accounts : List [Money]
    items : List [Item]

end


class MarketMod

  directive scala
  def get [A] (list : List [A]) (index : Index) : Option [A] =
    list.lift (index)

  directive lean
  def get {A : Type} (list : List (A)) (index : Index) : Option (A) :=
    list.get? (index)

  directive scala
  def set [A] (list : List [A]) (index : Index) (element : A) : List [A] =
    if (index < list.length)
    then list.updated (index , element)
    else list

  directive lean
  def set {A : Type} (list : List (A)) (index : Index) (element : A) : List (A) :=
    if (index < list.length)
    then list.set (index) (element)
    else list

  _tailrec_fold [A : Type] [B : Type] (sequence : List [A] ) (current : B)
      (next_value : B -> A -> B) : B =
    match sequence
      case Nil ==> current
      case (head) :: (tail) ==>
        _tailrec_fold [A] [B] (tail) (next_value (current) (head) ) (next_value)

  fold [A : Type] [B : Type] (sequence : List [A] ) (initial_value : B)
      (next_value : B -> A -> B) : B =
    _tailrec_fold [A] [B] (sequence) (initial_value) (next_value)

  mk_market (new_accounts : List [Money] ) (new_items : List [Item] ) : Market =
    Market_ (new_accounts) (new_items)

  as_market (market : Market) : Market =
    mk_market (market .accounts) (market .items)

  _advertise (items : List [Item] ) (item_id : Index) : List [Item] =
    match (get (items) (item_id) )
      case Some (item) ==>
        set (items) (item_id) (Item_ (item .owner) (item .price) (true) )
      case otherwise ==> items

  advertise (market : Market) (item_id : Index) : Market =
    mk_market (market .accounts) (_advertise (market .items) (item_id) )

  _remove_ad (items : List [Item] ) (item_id : Index) : List [Item] =
    match (get (items) (item_id) )
      case Some (item) ==>
        set (items) (item_id) (Item_ (item .owner) (item .price) (false) )
      case otherwise ==> items

  remove_ad (market : Market) (item_id : Index) : Market =
    mk_market (market .accounts) (_remove_ad (market .items) (item_id) )

  _transfer_with_balances (accounts : List [Money] ) (origin : Index) (target : Index)
      (amount : Money) (origin_balance : Money) (target_balance : Money) : List [Money] =
    set (set (accounts) (origin) (origin_balance - amount) ) (target) (target_balance + amount)

  _transfer_with (accounts : List [Money] ) (origin : Index) (target : Index) (amount : Money)
      (origin_balance : Money) : List [Money] =
    match (get (accounts) (target) )
      case Some (target_balance) ==>
        _transfer_with_balances (accounts) (origin) (target) (amount) (origin_balance) (target_balance)
      case otherwise ==> accounts

  _transfer (accounts : List [Money] ) (origin : Index) (target : Index) (amount : Money)
      : List [Money] =
    match (get (accounts) (origin) )
      case Some (origin_balance) ==>
        _transfer_with (accounts) (origin) (target) (amount) (origin_balance)
      case None ==> accounts

  sell (market : Market) (item_id : Index) (buyer : Index) : Market =
    match (get (market .items) (item_id) )
      case Some (item) ==>
        mk_market (
          _transfer (market .accounts) (buyer) (item .owner) (item .price) ) (
          set (market .items) (item_id) (Item_ (buyer) (item .price) (false) )
        )
      case otherwise ==>
        market

  _sum_pair (a : Money) (b : Money) : Money =
    a + b

  assets (market : Market) : Money =
    fold [Money] [Money] (market .accounts) (0) (_sum_pair)

  directive lean
  theorem
    lemma_set_keeps_length_1 (A : Type) (index : Index) (element : A) :
      ((Nil).set (index) (element) ).length = 0 :=
      by constructor

  directive lean
  theorem
    lemma_set_keeps_length_2 (A : Type) (head : A) (tail : List (A) ) (element : A) :
      ((head :: tail).set (0) (head)).length = ((element :: tail).set (0) (element)).length :=
      by constructor

  directive lean
  theorem
    set_keeps_length (A : Type) (list : List (A)) (index : Index) (element : A) :
      (list.set (index) (element) ).length = list.length :=
    match list with
      | Nil => lemma_set_keeps_length_1 (A) (index) (element)
      | (head) :: (tail) =>
        match index with
          | 0 => lemma_set_keeps_length_2 (A) (head) (tail) (element)
          | k + 1 => sorry

  directive lean
  theorem
    conservation_of_items_after_sell_operation (market : Market) (item_id : Index) (buyer : Index) :
       (sell (market) (item_id) (buyer) ).items.length = market.items.length :=
    sorry

  directive lean
  theorem
    lemma_fold (accounts : List (Money) ) (items : List (Item) ) (item_id : Index) (buyer : Index) :
     fold (Money) (Money) ( (sell (Market_ (accounts) (items)) (item_id) (buyer) ).accounts) (0) (_sum_pair) =
       fold (Money) (Money) (accounts) (0) (_sum_pair) :=
         sorry

  directive lean
  theorem
    conservation_of_money_after_sell_operation (market : Market) (item_id : Index) (buyer : Index) :
      assets (sell (market) (item_id) (buyer) ) = assets (market) :=
    lemma_fold (market.accounts) (market.items) (item_id) (buyer)

end

