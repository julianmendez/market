
directive scala
type Nat = Int
object Succ_ {
  def apply (n : Int) : Int = n + 1
  def unapply (n : Int) : Option [Int] =
    if (n <= 0) None else Some (n - 1)
}

directive lean
notation "Succ_" => Nat.succ

directive coq
Notation "'Succ_'" := S (at level 99) .


class Range

  abstract

  _tailrec_range (non_negative_number : Nat) (sequence : List [Nat] ) : List [Nat] =
    match non_negative_number
      case Succ_ (k) ==>
        _tailrec_range (k) ( (k) +: (sequence) )
      case _otherwise ==> sequence

  apply (length : Int) : List [Nat] =
    _tailrec_range (length) (Nil)

end
